# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
#GET     /                           controllers.Application.index()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

# User and Authentication Management Management
#GET     /user                           controllers.UserControlControl.getUsers()
GET     /user/:uid                      controllers.UserControl.getUser(uid: Long)
POST    /user                           controllers.UserControl.createUser()
PUT     /user/:uid                      controllers.UserControl.updateUser(uid: Long)
DELETE  /user/:uid                      controllers.UserControl.deleteUser(uid: Long)
DELETE  /user/:uid/force                controllers.UserControl.deleteUserForce(uid: Long)
#POST    /signup                         controllers.UserControl.signup()
#POST    /login                          controllers.UserControl.login()
#PUT     /login                          controllers.UserControl.updateLogin(sid: Long)
#DELETE  /login                          controllers.UserControl.logout(sid: Long)

### from socialgym
GET     /login                          controllers.Application.index()
GET     /authenticated                  controllers.Restricted.index()
GET     /login/:id                      controllers.Restricted.id(id: String)
GET     /logout                         com.feth.play.module.pa.controllers.Authenticate.logout()
GET     /authenticate/:provider         controllers.AuthenticateLocal.authenticate(provider: String)
GET     /authenticate/:provider/denied  controllers.Application.oAuthDenied(provider: String)
POST    /signup                         controllers.Application.doSignup()
#used to verify the email
GET     /accounts/verify/:token         controllers.Signup.verify(token: String)
GET     /accounts/unverified            controllers.Signup.unverified()
GET     /accounts/exists                controllers.Signup.exists()
POST    /login                          controllers.Application.doLogin()
GET    /login/denied                    controllers.Application.onLoginUserNotFound()

# People, Life Stories and Timeline
GET     /person                         controllers.PersonControl.getPersonAll()
GET     /person/:id                     controllers.PersonControl.getPerson(id: Long)
POST    /person                         controllers.PersonControl.createPerson()
POST    /person/mention                 controllers.PersonControl.createMentionPerson()
PUT     /person/:id                     controllers.PersonControl.updatePerson(id: Long)
DELETE  /person/:id                     controllers.PersonControl.deletePerson(id: Long)

GET     /person/:id/timeline            controllers.TimelineControl.getPersonTimeline(id: Long)
GET     /person/:id/timeline/:from/:to  controllers.TimelineControl.getPersonTimelineWithLimits(id: Long, from: Long, to: Long)
POST    /person/:id/timeline            controllers.TimelineControl.synchronizePersonTimeline(id: Long)

GET     /person/:id/lifestory           controllers.LifeStoryControl.getPersonLifeStoryAll(id: Long)
GET     /person/:id/lifestory/proganist controllers.LifeStoryControl.getProtagonistLifeStoryAll(id: Long)
GET     /lifestory/:lsid                controllers.LifeStoryControl.getLifeStory(lsid: Long)
POST    /lifestory                      controllers.LifeStoryControl.createLifeStory()
PUT     /lifestory/:lsid                controllers.LifeStoryControl.updateLifeStory(lsid: Long)
DELETE  /lifestory/:lsid                controllers.LifeStoryControl.deleteLifeStory(lsid: Long)
POST    /lifestory/:lsid/person/:id     controllers.LifeStoryControl.addParticipantToLifeStory(lsid: Long, id: Long)
POST    /lifestory/:lsid/protag/:id     controllers.LifeStoryControl.addProtagonistToLifeStory(lsid: Long, id: Long)
DELETE  /lifestory/:lsid/person/:id     controllers.LifeStoryControl.deletePersonFromLifeStory(lsid: Long, id: Long)
POST    /lifestory/:lsid/memento/:mid   controllers.LifeStoryControl.addMementoToLifeStory(lsid: Long, mid: Long)
POST    /lifestory/:lsid/memento        controllers.LifeStoryControl.addNewMementoToLifeStory(lsid: Long)

GET     /person/:id/memento             controllers.MementoControl.getAllPersonMemento(id: Long)
#GET     /person/:id/memento/protagonist controllers.MementoControl.getAllPersonMemento(id: Long)
#GET     /person/:id/memento/mention     controllers.MementoControl.getAllPersonMemento(id: Long)
GET     /memento/:id                    controllers.MementoControl.getMemento(id: Long)
POST    /memento                        controllers.MementoControl.createMemento()
PUT     /memento/:id                    controllers.MementoControl.updateMemento(id: Long)
DELETE  /memento/:id                    controllers.MementoControl.deleteMemento(id: Long)
POST    /memento/:id/person             controllers.MementoControl.addMementoParticipant(id: Long)
POST    /memento/:id/person/:pid        controllers.MementoControl.addMementoParticipantByPersonId(id: Long, pid: Long)

GET     /person/:id/relationships       controllers.RelationshipControl.getPersonRelationships(id: Long)
GET     /person/:id/curators            controllers.RelationshipControl.getPersonCurators(id: Long)
PUT     /relationship/:id               controllers.RelationshipControl.updateRelationship(id: Long)
POST    /relationship                   controllers.RelationshipControl.addRelationship()
DELETE  /relationship/:id               controllers.RelationshipControl.deleteRelationship(id: Long)

# Contextual Reminiscence
GET     /context/:cid                   controllers.ContextControl.getContext(cid: Long)
GET     /context/:cid/curators          controllers.ContextControl.getContextCurators(cid: Long)
GET     /context/:cid/memento/:mid      controllers.ContextControl.getContextMemento(cid: Long, mid: Long)
POST    /context/:cid/memento           controllers.ContextControl.createContextMemento(cid: Long)
PUT     /context/:cid/memento           controllers.ContextControl.updateContextMemento(cid: Long)
DELETE  /context/:cid/memento/:mid      controllers.ContextControl.deleteContextMemento(cid: Long, mid: Long)
GET     /context/:cid/question          controllers.ContextControl.getContextQuestions(cid: Long)
GET     /context/:cid/question/:decade  controllers.ContextControl.getContextQuestionsForDecade(cid: Long, decade: Long)
GET     /context/:cid/question/curated  controllers.ContextControl.getContextQuestionsByCurators(cid: Long)
POST    /context/:cid/question          controllers.ContextControl.createContextCuratedQuestions(cid: Long)

# General Questions
GET     /question/:byear/:fyear/        controllers.QuestionsControl.getGeneralQuestionsForYear(byear: Integer, fyear: Integer)
GET     /question/:chapter              controllers.QuestionsControl.getGeneralQuestionsForLifeChapter(chapter: String)

# General Public Mementos API (lifecontext proxy)
GET     /memento/random/:lang           controllers.PublicMementoControl.getRandomMemento(lang: String)
GET     /memento/:mid                   controllers.PublicMementoControl.getMemento(mid: Long)
GET     /memento/:decade/:place         controllers.PublicMementoControl.getMementoList(decade: Long, place: String, lat ?= null, lon ?= null, rad ?= null, lang: String ?= "it_IT")

# Utilities (cities, countries, other stuff)
GET     /city                           controllers.Application.getCities()
GET     /country/:countryId/city        controllers.Application.getCitiesByCountryId(countryId: Long)
GET     /country/:countryName/city      controllers.Application.getCitiesByCountryName(countryName: String)
GET     /city/sync/:lastCityId          controllers.Application.getNewCities(lastCityId: Long)
GET     /city/:cityName                 controllers.Application.getCitiesByCountryName(cityName: String)


